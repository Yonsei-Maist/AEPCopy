/// <summary>
/// ABR 측정 프로그램인 AEP의 가짜 프로그램 버전
/// 왼쪽 그래프의 경우, 실제 ABR 측정 결과 중 하나
/// 오른쪽 그래프의 경우, 랜덤 그래프 생성
/// @Author Chanwoo Gwon, Yonsei Univ. Researcher, 2020.05. ~
/// @Date 2020.09.
/// </summary>

using System;
using System.Drawing;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace AEPCopy {
	/// <summary>
	/// 메인 폼
	/// </summary>
	public partial class FormMain : Form {
		private class DoublePoint {
			public double X { get; set; }
			public double Y { get; set; }

			public DoublePoint(double X, double Y) {
				this.X = X;
				this.Y = Y;
			}
		}
		
		#region Field
		/// <summary>
		/// 랜덤 유닛
		/// </summary>
		private Random initRand = new Random(new DateTime().Millisecond);
		private Random updownRand = new Random(new DateTime().Millisecond);
		#endregion

		#region Method

		/// <summary>
		/// 생성자
		/// </summary>
		public FormMain() {
			InitializeComponent();

			this.drawChart();
		}

		/// <summary>
		/// 차트 출력 인터페이스
		/// </summary>
		private void drawChart() {
			DoublePoint[] leftGraph = this.getMadeGraph(); // this.makeGraph(696, 200);
			DoublePoint[] rightGraph = this.makeGraph(696, 200);

			this.draw(this.chartLeft, leftGraph, Color.FromArgb(255, 20, 0, 255));
			this.draw(this.chartRight, rightGraph, Color.FromArgb(255, 251, 0, 5));
		}

		/// <summary>
		/// 차트를 출력하는 매소드
		/// </summary>
		/// <param name="chart">차트를 그릴 컨트롤</param>
		/// <param name="point">차트에 입력될 데이터</param>
		/// <param name="color">차트 색깔</param>
		private void draw(Chart chart, DoublePoint[] point, Color color) {
			// 차트 초기화
			chart.Series.Clear();

			//차트 데이터 생성
			Series series1 = new Series {
				Name = "Series1",
				Color = color,
				IsVisibleInLegend = false,
				IsXValueIndexed = true,
				ChartType = SeriesChartType.Line,
				BorderWidth = 2
			};

			// 차트 입력
			chart.Series.Add(series1);

			for (int i = 0; i < point.Length; i++) {
				DoublePoint p = point[i];
				series1.Points.AddXY(p.X, p.Y);
			}

			// 차트 다시 그리기
			chart.ResetAutoValues();
		}

		/// <summary>
		/// ABR 예시 값을 차트 데이터 형식으로 변환
		/// </summary>
		/// <returns></returns>
		private DoublePoint[] getMadeGraph() {
			
			double[] value = new double[] {
				644.0,
		  643.5,
		  643.0,
		  642.0,
		  641.5,
		  641.0,
		  641.0,
		  641.0,
		  641.5,
		  642.0,
		  643.0,
		  645.0,
		  646.6666666666666,
		  647.5,
		  648.3333333333334,
		  650.0,
		  652.0,
		  653.0,
		  654.0,
		  654.5,
		  655.5,
		  655.5,
		  655.5,
		  655.5,
		  654.5,
		  654.0,
		  652.0,
		  651.5,
		  651.0,
		  649.0,
		  648.5,
		  647.5,
		  647.5,
		  646.5,
		  646.5,
		  645.5,
		  645.5,
		  644.5,
		  644.5,
		  644.5,
		  645.0,
		  647.0,
		  648.6666666666666,
		  649.5,
		  652.4,
		  655.0,
		  657.0,
		  660.8571428571429,
		  663.5,
		  667.0,
		  671.4285714285714,
		  674.5,
		  677.5714285714286,
		  681.1428571428571,
		  685.8571428571429,
		  688.5,
		  689.0,
		  692.25,
		  694.5,
		  694.5,
		  693.0,
		  691.3333333333334,
		  690.5,
		  687.6,
		  685.0,
		  683.0,
		  680.0,
		  677.0,
		  673.1428571428571,
		  669.5714285714286,
		  666.5,
		  664.5,
		  662.2,
		  659.0,
		  657.0,
		  656.5,
		  656.0,
		  656.5,
		  657.0,
		  659.0,
		  659.5,
		  661.0,
		  664.5,
		  666.0,
		  667.0,
		  668.5,
		  672.0,
		  673.5,
		  673.6666666666666,
		  675.5,
		  675.5,
		  675.5,
		  674.0,
		  672.3333333333334,
		  671.5,
		  669.5,
		  666.6,
		  662.4285714285714,
		  658.3333333333334,
		  656.4444444444445,
		  652.1,
		  646.5,
		  641.6666666666666,
		  637.1111111111111,
		  633.0,
		  628.8888888888889,
		  623.5,
		  618.1111111111111,
		  614.0,
		  609.8888888888889,
		  604.5,
		  600.0,
		  594.7272727272727,
		  589.5555555555555,
		  586.7,
		  582.25,
		  578.8333333333334,
		  576.5,
		  574.0,
		  572.0,
		  571.5,
		  570.5,
		  570.5,
		  571.0,
		  573.0,
		  576.2,
		  578.5,
		  579.5714285714286,
		  583.1428571428571,
		  587.8571428571429,
		  590.5,
		  594.0,
		  599.25,
		  602.0,
		  605.6666666666666,
		  610.5,
		  615.3333333333334,
		  619.8888888888889,
		  624.0,
		  629.0,
		  635.5833333333334,
		  642.5384615384615,
		  646.6153846153846,
		  652.9285714285714,
		  660.5,
		  667.3076923076923,
		  673.0,
		  679.5,
		  686.8461538461538,
		  693.0,
		  700.0,
		  707.0,
		  713.1538461538462,
		  719.6923076923077,
		  726.5,
		  734.8,
		  741.7857142857143,
		  744.0769230769231,
		  751.5,
		  758.5,
		  761.5714285714286,
		  765.1428571428571,
		  768.0,
		  770.6,
		  772.3333333333334,
		  774.0,
		  775.5,
		  776.0,
		  776.0,
		  776.0,
		  776.0,
		  775.5,
		  775.0,
		  774.0,
		  772.0,
		  770.3333333333334,
		  769.5,
		  767.5,
		  765.5,
		  763.5,
		  761.5,
		  758.6,
		  757.0,
		  753.0,
		  748.8333333333334,
		  748.25,
		  743.8571428571429,
		  740.0,
		  737.0,
		  734.0,
		  731.0,
		  729.0,
		  725.5,
		  723.0,
		  720.5,
		  718.0,
		  714.7142857142857,
		  711.4,
		  710.8333333333334,
		  708.5,
		  705.0,
		  703.5,
		  702.0,
		  700.5,
		  699.0,
		  697.5,
		  696.0,
		  693.3333333333334,
		  692.5,
		  691.6666666666666,
		  689.0,
		  686.3333333333334,
		  684.6,
		  683.0,
		  682.5,
		  679.0,
		  676.3333333333334,
		  675.5,
		  674.6666666666666,
		  672.0,
		  670.5,
		  670.0,
		  668.0,
		  667.5,
		  666.5,
		  666.5,
		  666.0,
		  667.3333333333334,
		  668.6666666666666,
		  669.5,
		  671.5,
		  674.4,
		  677.8333333333334,
		  679.5,
		  683.0,
		  688.25,
		  691.0,
		  695.5,
		  700.8888888888889,
		  706.5833333333334,
		  713.5384615384615,
		  716.6666666666666,
		  722.6923076923077,
		  730.0,
		  734.1111111111111,
		  738.6666666666666,
		  743.5,
		  747.5,
		  751.5,
		  754.5714285714286,
		  758.1428571428571,
		  761.0,
		  763.6,
		  765.3333333333334,
		  767.0,
		  769.0,
		  769.5,
		  770.0,
		  768.4,
		  766.0,
		  765.5,
		  762.6,
		  759.1666666666666,
		  756.5714285714286,
		  752.6666666666666,
		  748.1111111111111,
		  743.1818181818181,
		  737.6363636363636,
		  732.5,
		  724.2,
		  715.625,
		  711.25,
		  703.2941176470588,
		  694.8461538461538,
		  687.5,
		  681.0,
		  674.5,
		  668.0,
		  663.1666666666666,
		  656.8181818181818,
		  651.0,
		  646.8888888888889,
		  641.5,
		  637.0,
		  635.2857142857142,
		  631.1666666666666,
		  628.6666666666666,
		  627.0,
		  625.5,
		  624.5,
		  624.5,
		  624.0,
		  624.0,
		  624.5,
		  624.5,
		  625.5,
		  626.0,
		  627.0,
		  629.0,
		  629.0,
		  630.0,
		  631.0,
		  632.0,
		  632.5,
		  633.5,
		  633.5,
		  634.5,
		  634.5,
		  635.0,
		  635.0,
		  635.5,
		  635.5,
		  636.0,
		  636.0,
		  636.0,
		  636.0,
		  636.0,
		  636.5,
		  636.5,
		  637.0,
		  637.0,
		  637.5,
		  637.5,
		  638.5,
		  638.5,
		  639.5,
		  640.0,
		  640.5,
		  641.5,
		  641.5,
		  642.5,
		  642.5,
		  643.5,
		  643.5,
		  644.5,
		  644.5,
		  645.0,
		  645.0,
		  645.0,
		  645.0,
		  645.0,
		  645.0,
		  645.0,
		  644.5,
		  644.0,
		  643.0,
		  642.5,
		  641.5,
		  640.0,
		  639.5,
		  639.0,
		  636.0,
		  634.3333333333334,
		  633.5,
		  630.6,
		  629.0,
		  626.5,
		  624.0,
		  622.4,
		  619.5,
		  616.6,
		  615.0,
		  612.5,
		  610.0,
		  607.5,
		  605.0,
		  602.5,
		  600.0,
		  598.4,
		  595.5,
		  593.5,
		  592.6666666666666,
		  591.3333333333334,
		  589.5,
		  589.5,
		  588.5,
		  588.5,
		  587.5,
		  587.5,
		  587.5,
		  587.5,
		  588.0,
		  588.0,
		  588.5,
		  589.0,
		  589.5,
		  590.5,
		  590.5,
		  591.5,
		  591.5,
		  592.5,
		  592.5,
		  593.5,
		  593.5,
		  594.5,
		  595.0,
		  597.0,
		  598.6666666666666,
		  598.3333333333334,
		  600.0,
		  603.0,
		  603.5,
		  605.0,
		  607.6666666666666,
		  608.5,
		  609.3333333333334,
		  612.0,
		  613.5,
		  615.0,
		  617.6666666666666,
		  618.5,
		  619.3333333333334,
		  622.0,
		  624.6666666666666,
		  624.3333333333334,
		  626.0,
		  628.0,
		  629.0,
		  630.0,
		  631.0,
		  632.0,
		  633.0,
		  634.0,
		  634.5,
		  635.5,
		  636.0,
		  637.0,
		  638.0,
		  638.5,
		  639.5,
		  640.0,
		  641.0,
		  642.0,
		  643.0,
		  643.5,
		  644.5,
		  645.0,
		  646.0,
		  646.5,
		  647.5,
		  648.0,
		  648.5,
		  649.5,
		  649.5,
		  650.0,
		  650.0,
		  650.0,
		  650.0,
		  649.5,
		  649.5,
		  648.5,
		  648.5,
		  647.5,
		  647.5,
		  646.5,
		  646.5,
		  646.0,
		  645.5,
		  645.5,
		  645.0,
		  645.0,
		  644.5,
		  644.5,
		  644.0,
		  644.0,
		  644.0,
		  644.0,
		  644.0,
		  644.0,
		  643.5,
		  643.5,
		  643.0,
		  642.5,
		  642.5,
		  642.0,
		  642.0,
		  641.5,
		  641.5,
		  641.0,
		  641.0,
		  641.0,
		  641.0,
		  641.0,
		  641.0,
		  641.0,
		  641.0,
		  641.0,
		  641.5,
		  641.5,
		  642.5,
		  642.5,
		  643.5,
		  643.5,
		  644.0,
		  644.0,
		  644.5,
		  644.5,
		  645.0,
		  645.5,
		  645.5,
		  646.5,
		  646.5,
		  647.5,
		  647.5,
		  648.5,
		  648.5,
		  649.5,
		  649.5,
		  650.5,
		  650.5,
		  651.5,
		  653.0,
		  653.0,
		  654.0,
		  654.5,
		  655.5,
		  655.5,
		  656.5,
		  656.5,
		  657.0,
		  657.0,
		  657.0,
		  657.0,
		  657.0,
		  657.0,
		  656.5,
		  656.0,
		  655.5,
		  655.0,
		  655.0,
		  654.5,
		  654.5,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  654.0,
		  653.5,
		  653.5,
		  653.0,
		  653.0,
		  652.5,
		  652.5,
		  652.0,
		  652.0,
		  652.0,
		  652.0,
		  652.0,
		  652.0,
		  652.0,
		  652.5,
		  652.5,
		  653.5,
		  653.5,
		  654.5,
		  654.5,
		  655.5,
		  656.0,
		  656.5,
		  657.5,
		  658.0,
		  659.0,
		  659.5,
		  660.5,
		  660.5,
		  661.5,
		  662.0,
		  663.0,
		  663.5,
		  664.5,
		  664.5,
		  665.5,
		  667.0,
		  667.0,
		  668.0,
		  668.5,
		  669.5,
		  670.0,
		  671.0,
		  671.5,
		  672.5,
		  672.5,
		  673.5,
		  673.5,
		  674.5,
		  675.0,
		  675.5,
		  676.5,
		  677.0,
		  678.0,
		  678.5,
		  679.5,
		  679.5,
		  680.5,
		  681.0,
		  682.0,
		  682.5,
		  683.5,
		  684.0,
		  685.0,
		  686.0,
		  687.0,
		  688.0,
		  688.5,
		  689.5,
		  689.5,
		  690.5,
		  690.5,
		  691.5,
		  691.5,
		  692.5,
		  692.5,
		  693.5,
		  693.5,
		  694.5,
		  695.0,
		  695.5,
		  696.5,
		  697.0,
		  698.0,
		  699.0,
		  700.0,
		  701.0,
		  702.0,
		  703.0,
		  704.0,
		  705.0,
		  706.0,
		  708.0,
		  708.5,
		  709.0,
		  710.5,
		  711.5,
		  712.0,
		  713.0,
		  713.5,
		  714.5,
		  714.5,
		  715.5,
		  715.5,
		  716.5,
		  716.5,
		  717.5,
		  718.0,
		  718.5,
		  719.5,
		  719.5,
		  720.5,
		  720.5,
		  721.0,
		  721.0,
		  721.0,
		  721.0,
		  721.0,
		  721.0,
		  720.5,
		  720.5
			};
			
			DoublePoint[] point = new DoublePoint[value.Length];
			for (int i = 0; i < value.Length; i++) {
				point[i] = new DoublePoint(i, (int)value[i]);
			}

			return point;
		}
		
		/// <summary>
		/// 차트 랜덤 생성
		/// </summary>
		/// <param name="xLimit">x축 최대값</param>
		/// <param name="yMax">y 초기값의 최대값</param>
		/// <param name="yMin">y 초기값의 최소값</param>
		/// <returns></returns>
		private DoublePoint[] makeGraph(int xLimit, int yMax, int yMin = 50) {
			DoublePoint[] result = new DoublePoint[xLimit];
			double init = this.initRand.Next() % yMax; // y 초기값 설정
			int updown = 0; // 증가, 감소, 유지 결정
			Random adder = new Random(new DateTime().Millisecond); // 증가, 감소량 결정
			double current = init; // 현재 그래프 y값
			for (int i = 0; i < xLimit; i++) {
				double add = (adder.Next() % 1000) / 100.0;
				updown = this.updownRand.Next() % 3;

				switch (updown) {
					case 0: // up
						current += add;
						break;
					case 1: // down
						current -= add;
						break;
					default: // equal
						break;
				}

				result[i] = new DoublePoint(i, current);
			}

			return result;
		}

		#endregion

		#region Event Handler
		private void btnRefresh_Click(object sender, EventArgs e) {
			this.drawChart();
		}
		#endregion
	}
}
